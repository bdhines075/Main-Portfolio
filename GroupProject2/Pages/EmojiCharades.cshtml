@page
@model EmojiCharadesModel
@{
    ViewData["Title"] = "Emoji Charades";
}

<div class="container mt-5">
    <h2>🎭 Emoji Charades</h2>

    <button class="btn btn-info mb-3" onclick="alert('One player is randomly selected as the King each round. The King secretly chooses a correct answer and creates a clue (text and/or emojis). Other players make guesses based on the clue. The King can press the " BUZZ" button if a guess is wrong to flash the red buzzer. The King picks a winner manually by selecting a player from the list when someone guesses close enough. There is no strict turn order. Guess freely and watch for the buzzer signal!');">📜 How to Play</button>

    <input id="playerNameInput" class="form-control mb-2" placeholder="Enter your name..." />
    <button class="btn btn-primary mb-3" onclick="joinGame()">Join Game</button>

    <div>
        <h5>Players in Lobby</h5>
        <ul id="playerList"></ul>
    </div>

    <!-- Waiting message for non-Kings -->
    <div id="waitingMessage" style="display:none; margin-top: 20px;" class="alert alert-info">
        Waiting for the King to create a clue...
    </div>

    <button class="btn btn-success mb-4" onclick="startGame()">Start Game</button>

    <!-- King Clue Entry Section -->
    <div id="kingSection" style="display:none;">
        <h4>👑 You are the King! Create a Clue:</h4>
        <input id="textClueInput" class="form-control mb-2" placeholder="Enter your text clue..." />
        <input id="emojiClueInput" class="form-control mb-2" placeholder="Click emojis below to add..." readonly />

        <div class="mb-2">
            <button class="btn btn-sm btn-outline-primary" onclick="loadEmojis('faces')">😊 Faces</button>
            <button class="btn btn-sm btn-outline-primary" onclick="loadEmojis('animals')">🐶 Animals</button>
            <button class="btn btn-sm btn-outline-primary" onclick="loadEmojis('food')">🍕 Food</button>
            <button class="btn btn-sm btn-outline-primary" onclick="loadEmojis('objects')">💡 Objects</button>
        </div>

        <div id="emojiPicker" class="mb-3"></div>

        <div class="d-flex gap-2">
            <button class="btn btn-primary" onclick="submitClue()">Submit Clue</button>
            <button class="btn btn-warning" onclick="updateClue()">Update Clue</button>
        </div>
    </div>

    <!-- Clue Display -->
    <div id="clueDisplay" class="mt-4" style="display:none;">
        <h4>❌ Clue: <span id="currentClueText"></span></h4>
        <div id="currentClueEmojis" style="font-size: 1.8rem;"></div>
    </div>

    <!-- Visual Buzzer -->
    <div id="buzzerContainer" style="display:none; margin-top: 30px; text-align: center;">
        <h4>BUZZER</h4> <!-- New label/title -->
        <div id="buzzerLight" style="width: 200px; height: 200px; margin: 0 auto; background-color: darkred; border-radius: 12px; transition: background-color 0.3s; display: flex; align-items: center; justify-content: center; font-size: 2rem; color: white; font-weight: bold;"></div>
        <div id="buzzButtonContainer" style="margin-top: 10px;">
            <button id="buzzButton" class="btn btn-danger mt-3" style="display:none;" onclick="buzzPlayers()">BUZZ ❌</button>
        </div>
    </div>



    <!-- Player Guess Section -->
    <div id="playerGuessSection" style="display:none; margin-top: 20px;">
        <input type="text" id="guessInput" placeholder="Enter your guess..." class="form-control" />
        <button class="btn btn-primary mt-2" onclick="submitGuess()">Submit Guess</button>
    </div>

    <!-- Clue Log -->
    <div id="clueLog" class="mt-4" style="display:none;">
        <h5>Clue Log:</h5>
        <ul id="guessList" class="list-group"></ul>
    </div>

    <!-- Winner Selection -->
    <div id="winnerSelection" class="mt-4" style="display:none;">
        <h5>Pick a Winner:</h5>
        <select id="winnerDropdown" class="form-select mb-2"></select>
        <button class="btn btn-success" onclick="declareWinner()">Declare Winner</button>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script>
        let playerName = "";
        let isKing = false;
        let selectedEmojis = [];

        const emojis = {
            faces: ["😀", "😎", "😍", "🤯", "😴", "🥳"],
            animals: ["🐭", "🐶", "🐻", "🦁", "🐸", "🐷"],
            food: ["🍕", "🍔", "🍎", "🍪", "🌭"],
            objects: ["💡", "🎈", "📱", "🎁"]
        };

        // Build connection with username passed in the query string once playerName is set
        const connection = new signalR.HubConnectionBuilder()
            .withUrl(`/charadesHub?username=${encodeURIComponent(playerName)}`)
            .build();

        function joinGame() {
            playerName = document.getElementById("playerNameInput").value.trim();
            if (playerName !== "") {
                connection.invoke("JoinGame", playerName);
            }
        }

        function startGame() {
            connection.invoke("StartGame");
        }

        function loadEmojis(category) {
            const picker = document.getElementById("emojiPicker");
            picker.innerHTML = "";
            emojis[category].forEach(e => {
                const span = document.createElement("span");
                span.textContent = e;
                span.style.cursor = "pointer";
                span.style.fontSize = "2rem";
                span.style.marginRight = "8px";

                span.onclick = () => {
                    selectedEmojis.push(e);
                    updateEmojiClueInput();
                };

                picker.appendChild(span);
            });
        }

        function updateEmojiClueInput() {
            document.getElementById("emojiClueInput").value = selectedEmojis.join(" ");
        }

        function submitClue() {
            const textClue = document.getElementById("textClueInput").value;
            const emojiClue = selectedEmojis.join(" ");
            connection.invoke("SubmitClue", textClue, emojiClue);
        }

        function updateClue() {
            const textClue = document.getElementById("textClueInput").value;
            const emojiClue = selectedEmojis.join(" ");
            connection.invoke("SubmitClue", textClue, emojiClue);
        }

        function submitGuess() {
            const guess = document.getElementById("guessInput").value.trim();
            if (guess !== "") {
                connection.invoke("SubmitGuess", playerName, guess);
                document.getElementById("guessInput").value = "";
            }
        }

        function declareWinner() {
            const selected = document.getElementById("winnerDropdown").value;
            if (selected) {
                connection.invoke("DeclareWinner", selected);
            }
        }

        function populateWinnerDropdown(players) {
            const dropdown = document.getElementById("winnerDropdown");
            dropdown.innerHTML = "";
            players.forEach(p => {
                if (p !== playerName) {
                    const opt = document.createElement("option");
                    opt.value = p;
                    opt.textContent = p;
                    dropdown.appendChild(opt);
                }
            });
            document.getElementById("winnerSelection").style.display = "block";
        }

        connection.on("PlayerListUpdated", function (players) {
            const list = document.getElementById("playerList");
            list.innerHTML = "";
            players.forEach(p => {
                const li = document.createElement("li");
                li.textContent = p;
                list.appendChild(li);
            });
        });

        connection.on("YouAreKing", function () {
            isKing = true;
            // King always sees their clue panel.
            document.getElementById("kingSection").style.display = "block";
            document.getElementById("playerGuessSection").style.display = "none";
        });

        connection.on("WaitingForClue", function () {
            document.getElementById("waitingMessage").style.display = "block";
        });

        connection.on("ClueSubmitted", function (text, emojis) {
            // Non-Kings hide the clue editor; the King keeps it visible for updates.
            if (!isKing) {
                document.getElementById("kingSection").style.display = "none";
            }

            // Hide the waiting message for everyone.
            document.getElementById("waitingMessage").style.display = "none";

            document.getElementById("clueDisplay").style.display = "block";
            document.getElementById("currentClueText").textContent = text;
            document.getElementById("currentClueEmojis").textContent = emojis;

            if (!isKing) {
                document.getElementById("playerGuessSection").style.display = "block";
            }
            document.getElementById("clueLog").style.display = "block";
            document.getElementById("buzzerContainer").style.display = "block";

            if (isKing) {
            document.getElementById("buzzButton").style.display = "inline-block";
            }
        });

        connection.on("ReceiveGuess", function (player, guess) {
            const li = document.createElement("li");
            li.className = "list-group-item";
            li.textContent = `${player}: ${guess}`;
            document.getElementById("guessList").appendChild(li);
        });

        connection.on("PromptWinnerSelection", function (players) {
            if (isKing) {
                populateWinnerDropdown(players);
            }
        });

        connection.on("WinnerDeclared", function (winner) {
            alert(`${winner} has been declared the winner!`);
            location.reload();
        });

        function buzzPlayers() {
            connection.invoke("SendBuzz");
        }

        connection.on("ReceiveBuzz", function () {
            const buzzer = document.getElementById("buzzerLight");
            buzzer.style.backgroundColor = "red";
            buzzer.textContent = "TRY AGAIN!"; 

            setTimeout(() => {
                buzzer.style.backgroundColor = "darkred";
                buzzer.textContent = ""; 
            }, 800);
        });


        connection.start().then(() => {
            console.log("Connected to Emoji Charades Hub");
        }).catch(err => console.error(err.toString()));
    </script>
}
